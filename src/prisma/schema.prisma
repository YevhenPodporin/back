// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String?
  google_id    String?
  profile      Profile?
  fromFriends  Friends[] @relation("fromUser")
  toFriends    Friends[] @relation("toUser")
  chatFromUser Chats[]   @relation("chatFromUser")
  chatToUser   Chats[]   @relation("chatToUser")

  @@map("users")
}

model Profile {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String?
  date_of_birth String?
  file_path     String?
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int        @unique
  is_online     Boolean    @default(false)
  messages      Messages[]
  updated_at    DateTime   @default(now())
  created_at    DateTime   @default(now())

  @@map("profile")
}

model Chats {
  id            Int             @id @default(autoincrement())
  from_user_id  Int
  to_user_id    Int
  messages      Messages[]
  from_user     Users           @relation("chatFromUser", fields: [from_user_id], references: [id], onDelete: Cascade)
  to_user       Users           @relation("chatToUser", fields: [to_user_id], references: [id], onDelete: Cascade)
  updated_at    DateTime        @default(now())
  created_at    DateTime        @default(now())
  notifications Notifications[]

  @@map("chats")
}

model Notifications {
  id              Int   @id @default(autoincrement())
  to_chat_id      Int
  to_user_id      Int
  unread_messages Int
  chat            Chats @relation(fields: [to_chat_id], references: [id], onDelete: Cascade)

  @@unique([to_chat_id, to_user_id]) // Define a unique constraint on the fields you want to search by.
  @@map("notifications")
}

model Messages {
  id         Int      @id @default(autoincrement())
  chat       Chats    @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id    Int
  user       Profile  @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
  sender_id  Int
  message    String
  file       String?
  updated_at DateTime @default(now())
  created_at DateTime @default(now())

  @@map("messages")
}

model Friends {
  id           Int           @id @default(autoincrement())
  from_user_id Int
  to_user_id   Int
  status       RequestStatus
  from_user    Users         @relation("fromUser", fields: [from_user_id], references: [id], onDelete: Cascade)
  to_user      Users         @relation("toUser", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@map("friends")
}

enum RequestStatus {
  REQUEST
  APPROVED
  REJECTED
}
